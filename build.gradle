buildscript {
  repositories {
    jcenter()
    maven {
      name = "forge"
      url = "http://files.minecraftforge.net/maven"
    }
  }
  dependencies {
    classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
  }
}
apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "maven-publish"

def mod_file = getModFile()
version = getModField("VERSION", mod_file)
group = "net.gegy1000.blocksystems"
archivesBaseName = "BlockSystems"
sourceCompatibility = targetCompatibility = "1.8"

def core_plugin = "net.gegy1000.blocksystems.server.core.BlockSystemPlugin"
def minecraft_mappings = "snapshot_20180503"

minecraft {
  version = "1.12.2-14.23.3.2655"
  runDir = "minecraft"
  mappings = minecraft_mappings

  clientJvmArgs = ["-Dfml.coreMods.load=$core_plugin"]
  serverJvmArgs = ["-Dfml.coreMods.load=$core_plugin"]
}

repositories {
  mavenCentral()
}

dependencies {
}

processResources {
  inputs.property "version", project.version
  inputs.property "mcversion", project.minecraft.version
  from(sourceSets.main.resources.srcDirs) {
    include "mcmod.info"
    expand "version": project.version, "mcversion": project.minecraft.version
  }
  from(sourceSets.main.resources.srcDirs) {
    exclude "mcmod.info"
  }
}

task generateMappings {
  def mappingParts = minecraft_mappings.split("_")
  def inputFile = new File("${System.properties["user.home"]}/.gradle/caches/minecraft/de/oceanlabs/mcp/mcp_${mappingParts[0]}/${mappingParts[1]}/${project.minecraft.version}/srgs/mcp-srg.srg")

  def outputFile = new File("src/main/resources/blocksystems.mappings")
  outputFile.withWriter("UTF-8") { writer ->
    if (inputFile.exists()) {
      inputFile.eachLine { line ->
        def parts = line.split(" ")
        if (line.startsWith("FD")) {
          writer.write("${parts[1]}=${getLastSeparated(parts[2])}")
        } else if (line.startsWith("MD")) {
          writer.write("${parts[1]}${parts[2]}=${getLastSeparated(parts[3])}")
        }
        writer.write('\n')
      }
    }
  }
}

compileJava.dependsOn generateMappings
decompileMc.dependsOn generateMappings

jar {
  manifest {
    attributes "FMLAT": "blocksystems_at.cfg"
    attributes "FMLCorePlugin": "net.gegy1000.blocksystems.server.core.BlockSystemPlugin"
    attributes "FMLCorePluginContainsFMLMod": "true"
  }
}

task devJar(type: Jar) {
  classifier = "dev"
  from sourceSets.main.output
  manifest {
    attributes "FMLAT": "blocksystems_at.cfg"
    attributes "FMLCorePlugin": "net.gegy1000.blocksystems.server.core.BlockSystemPlugin"
    attributes "FMLCorePluginContainsFMLMod": "true"
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = "sources"
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = "javadoc"
  from javadoc.getDestinationDir()
}

artifacts {
  archives sourcesJar
  archives devJar
  archives javadocJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId "net.gegy1000"
      artifactId "blocksystems"
      version project.version

      from components.java

      artifact devJar {
        classifier "dev"
      }
      artifact sourcesJar {
        classifier "sources"
      }
      artifact javadocJar {
        classifier "javadoc"
      }
    }
  }
  repositories {
    maven {
      credentials {
        username project.mavenUsername ?: ""
        password project.mavenPassword ?: ""
      }
      url project.mavenUrl ?: ""
    }
  }
}

String getModFile() {
  String path = ""
  FileTree tree = fileTree(dir: 'src/main/java')
  tree.include '**/*.java'
  tree.visit { element ->
    if (element.file.isFile()) {
      element.file.eachLine { String s ->
        s = s.trim()
        if (s.matches("@Mod\\s*\\(.*")) {
          path = "src/main/java/$element.relativePath"
        }
      }
    }
  }
  return path
}

String getModField(String type, String mod_file) {
  if (mod_file.length() == 0) {
    return ""
  }
  String field = ""
  String prefix = "public static final String $type = \""
  File file = file(mod_file)
  file.eachLine { String s ->
    s = s.trim()
    if (s.startsWith(prefix)) {
      s = s.substring(prefix.length(), s.length() - 2)
      field = s
    }
  }
  return field
}

static String getLastSeparated(String input) {
  return input.substring(input.lastIndexOf('/') + 1, input.length())
}
